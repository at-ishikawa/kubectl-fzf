// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/at-ishikawa/kubectl-fzf/internal/command (interfaces: Kubectl)

// Package command is a generated GoMock package.
package command

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKubectl is a mock of Kubectl interface
type MockKubectl struct {
	ctrl     *gomock.Controller
	recorder *MockKubectlMockRecorder
}

// MockKubectlMockRecorder is the mock recorder for MockKubectl
type MockKubectlMockRecorder struct {
	mock *MockKubectl
}

// NewMockKubectl creates a new mock instance
func NewMockKubectl(ctrl *gomock.Controller) *MockKubectl {
	mock := &MockKubectl{ctrl: ctrl}
	mock.recorder = &MockKubectlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubectl) EXPECT() *MockKubectlMockRecorder {
	return m.recorder
}

// getCommand mocks base method
func (m *MockKubectl) getCommand(arg0, arg1 string, arg2 []string, arg3 map[string]string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getCommand", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	return ret0
}

// getCommand indicates an expected call of getCommand
func (mr *MockKubectlMockRecorder) getCommand(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCommand", reflect.TypeOf((*MockKubectl)(nil).getCommand), arg0, arg1, arg2, arg3)
}

// run mocks base method
func (m *MockKubectl) run(arg0 context.Context, arg1 string, arg2 []string, arg3 map[string]string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "run", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// run indicates an expected call of run
func (mr *MockKubectlMockRecorder) run(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "run", reflect.TypeOf((*MockKubectl)(nil).run), arg0, arg1, arg2, arg3)
}
